// This code was autogenerated with `dbus-codegen-rust -s -d org.freedesktop.login1 -p /org/freedesktop/login1 -f org.freedesktop.login1.Manager`, see https://github.com/diwic/dbus-rs
use dbus as dbus;
#[allow(unused_imports)]
use dbus::arg;
use dbus::blocking;

pub trait OrgFreedesktopLogin1Manager {
    fn power_off(&self, interactive: bool) -> Result<(), dbus::Error>;
    fn power_off_with_flags(&self, flags: u64) -> Result<(), dbus::Error>;
    fn reboot(&self, interactive: bool) -> Result<(), dbus::Error>;
    fn reboot_with_flags(&self, flags: u64) -> Result<(), dbus::Error>;
}

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target=T>> OrgFreedesktopLogin1Manager for blocking::Proxy<'a, C> {

    fn power_off(&self, interactive: bool) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.login1.Manager", "PowerOff", (interactive, ))
    }

    fn power_off_with_flags(&self, flags: u64) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.login1.Manager", "PowerOffWithFlags", (flags, ))
    }

    fn reboot(&self, interactive: bool) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.login1.Manager", "Reboot", (interactive, ))
    }

    fn reboot_with_flags(&self, flags: u64) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.login1.Manager", "RebootWithFlags", (flags, ))
    }
}
